<?php

namespace App\Infrastructure\QrCode\Services;

use App\Domain\QrCode\ValueObjects\Content;
use App\Domain\QrCode\Entities\QrCodeConfiguration;
use App\Domain\QrCode\Services\QrCodeGeneratorServiceInterface;
use App\Domain\QrCode\Exceptions\GenerationFailedException;
use App\Domain\QrCode\ValueObjects\FileType;

class SimpleQrCodeGenerator implements QrCodeGeneratorServiceInterface
{
    /**
     * Simple QR code generator for testing purposes and fallback when endroid/qr-code is not available
     * 
     * This generates placeholder QR code images with basic patterns based on content hash.
     * For production use, install endroid/qr-code package: composer install
     * 
     * The system will automatically use LibraryQrCodeGenerator when the library is available.
     */
    public function generate(Content $content, QrCodeConfiguration $configuration): string
    {
        try {
            $fileType = $configuration->getFileType();
            
            return match ($fileType->getValue()) {
                FileType::PNG => $this->generatePng($content, $configuration),
                FileType::JPG => $this->generateJpg($content, $configuration),
                FileType::SVG => $this->generateSvg($content, $configuration),
                FileType::PDF => $this->generatePdf($content, $configuration),
                default => throw new GenerationFailedException(
                    'Unsupported file type: ' . $fileType->getValue()
                ),
            };
        } catch (\Exception $e) {
            throw new GenerationFailedException(
                'Failed to generate QR code: ' . $e->getMessage(),
                previous: $e
            );
        }
    }

    public function supports(QrCodeConfiguration $configuration): bool
    {
        return in_array(
            $configuration->getFileType()->getValue(),
            $this->getSupportedFileTypes()
        );
    }

    public function getSupportedFileTypes(): array
    {
        return [FileType::PNG, FileType::JPG, FileType::SVG, FileType::PDF];
    }

    private function generatePng(Content $content, QrCodeConfiguration $configuration): string
    {
        // Create a simple 1x1 PNG for testing
        // In production, use proper QR code generation
        $width = $configuration->getSize()->getWidth();
        $height = $configuration->getSize()->getHeight();
        
        // PNG signature and basic structure
        $png = "\x89PNG\r\n\x1a\n";
        $png .= pack('N', 13); // IHDR chunk length
        $png .= 'IHDR';
        $png .= pack('N', $width); // Width
        $png .= pack('N', $height); // Height
        $png .= "\x08\x06\x00\x00\x00"; // 8-bit RGBA
        $png .= pack('N', crc32('IHDR' . pack('N', $width) . pack('N', $height) . "\x08\x06\x00\x00\x00"));
        
        // Simple black square for demo
        $imageData = '';
        for ($y = 0; $y < $height; $y++) {
            $imageData .= "\x00"; // Filter byte
            for ($x = 0; $x < $width; $x++) {
                // Create a simple pattern based on content hash
                $hash = md5($content->getValue());
                $pixel = (hexdec($hash[($x + $y) % 32]) % 2) ? "\x00\x00\x00\xFF" : "\xFF\xFF\xFF\xFF";
                $imageData .= $pixel;
            }
        }
        
        $compressedData = gzcompress($imageData);
        $png .= pack('N', strlen($compressedData));
        $png .= 'IDAT';
        $png .= $compressedData;
        $png .= pack('N', crc32('IDAT' . $compressedData));
        
        // IEND chunk
        $png .= pack('N', 0);
        $png .= 'IEND';
        $png .= pack('N', crc32('IEND'));
        
        return $png;
    }

    private function generateJpg(Content $content, QrCodeConfiguration $configuration): string
    {
        // For testing, return a minimal JPEG structure
        // In production, convert PNG to JPEG or generate directly
        $jpeg = "\xFF\xD8\xFF\xE0\x00\x10JFIF\x00\x01\x01\x01\x00H\x00H\x00\x00";
        $jpeg .= "\xFF\xFE\x00\x13Generated by QR Service";
        $jpeg .= "\xFF\xD9"; // End of image
        
        return $jpeg;
    }

    private function generateSvg(Content $content, QrCodeConfiguration $configuration): string
    {
        $size = $configuration->getSize();
        $width = $size->getWidth();
        $height = $size->getHeight();
        $color = $configuration->getColor()->getValue();
        $background = $configuration->getBackground()->getValue();
        
        // Create a simple SVG with a pattern representing the QR code
        $svg = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
        $svg .= sprintf(
            '<svg width="%d" height="%d" viewBox="0 0 %d %d" xmlns="http://www.w3.org/2000/svg">',
            $width, $height, $width, $height
        ) . "\n";
        
        // Background
        $svg .= sprintf(
            '<rect width="%d" height="%d" fill="%s"/>',
            $width, $height, $background
        ) . "\n";
        
        // Create a simple grid pattern based on content
        $hash = md5($content->getValue());
        $gridSize = 10;
        $cellSize = $width / $gridSize;
        
        for ($y = 0; $y < $gridSize; $y++) {
            for ($x = 0; $x < $gridSize; $x++) {
                $index = ($x + $y * $gridSize) % strlen($hash);
                if (hexdec($hash[$index]) % 2 === 0) {
                    $svg .= sprintf(
                        '<rect x="%d" y="%d" width="%d" height="%d" fill="%s"/>',
                        $x * $cellSize, $y * $cellSize, $cellSize, $cellSize, $color
                    ) . "\n";
                }
            }
        }
        
        $svg .= '</svg>';
        
        return $svg;
    }

    private function generatePdf(Content $content, QrCodeConfiguration $configuration): string
    {
        // Simple PDF structure for testing
        $pdf = "%PDF-1.4\n";
        $pdf .= "1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj\n";
        $pdf .= "2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj\n";
        $pdf .= "3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R>>endobj\n";
        
        $content_str = sprintf(
            "BT/F1 12 Tf 100 700 Td(QR Code for: %s)Tj ET",
            substr($content->getValue(), 0, 50)
        );
        
        $pdf .= sprintf("4 0 obj<</Length %d>>stream\n%s\nendstream endobj\n", strlen($content_str), $content_str);
        $pdf .= "xref\n0 5\n0000000000 65535 f \n0000000009 00000 n \n0000000058 00000 n \n0000000115 00000 n \n0000000206 00000 n \n";
        $pdf .= "trailer<</Size 5/Root 1 0 R>>\nstartxref\n300\n%%EOF";
        
        return $pdf;
    }
}